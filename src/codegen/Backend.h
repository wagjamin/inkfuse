#ifndef INKFUSE_BACKEND_H
#define INKFUSE_BACKEND_H

#include "codegen/IR.h"
#include <memory>
#include <string_view>

/// A compiler backend allowing us to lower an IR program to another representation.
namespace inkfuse {

struct InterruptableJob;

namespace IR {

/// A program generated by a backend.
struct BackendProgram {
   /// Virtual base destructor.
   virtual ~BackendProgram() = default;

   /// Link the backend program. This way, it doesn't get linked lazily during the first lookup.
   virtual void link() = 0;

   /// Unlink the backend program.
   virtual void unlink() = 0;

   /// Compile the backend program to actual machine code. The interrupt is used to stop compilation.
   virtual void compileToMachinecode(InterruptableJob& interrupt, bool compile_for_interpreter = false) = 0;

   /// Get a function with the specified name from the compiled program.
   virtual void* getFunction(std::string_view name) = 0;

   /// Dump the backend program in a readable way into a file.
   virtual void dump() = 0;
};

/// The actual backend lowering from an IR::Program to a BackendProgram.
struct Backend {
   /// Virtual base destructor.
   virtual ~Backend() = default;

   /// Generate a backend program from the high-level IR.
   virtual std::unique_ptr<BackendProgram> generate(const IR::Program& program) = 0;
};

}

}

#endif //INKFUSE_BACKEND_H
